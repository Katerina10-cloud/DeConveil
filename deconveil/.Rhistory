##build a query to retrieve data
getResults(query_TCGA_cnv)
#download
GDCdownload(query_TCGA_cnv)
#prepare data
brca_cnv <- GDCprepare(query_TCGA_cnv, summarizedExperiment = TRUE)
brca_cnv_tumor <- assay(brca_cnv, 'copy_number', rownames = TRUE)
View(brca_cnv_tumor)
View(brca_cnv_tumor)
gene_name <- as.data.frame(brca_cnv@rowRanges@elementMetadata@listData[["gene_name"]])
View(gene_name)
View(brca_cnv)
colnames(gene_name)[1] <- "GeneID"
brca_cnv_tumor <- as.data.frame(brca_cnv_tumor)
View(brca_cnv_tumor)
brca_cnv_tumor <- cbind(gene_name, brca_cnv_tumor)
brca_cnv_tumor <- brca_cnv_tumor[!duplicated(brca_cnv_tumor$GeneID), ] %>% remove_rownames %>% column_to_rownames(var="GeneID")
View(brca_cnv_tumor)
brca_cnv_tumor <- na.omit(brca_cnv_tumor)
View(brca_cnv_tumor)
save(brca_cnv_tumor, file = '~/model_data/TCGA/breast_cancer/brca_cnv_tumor.Rdata')
library(limma)
library(DESeq2)
library(cowplot)
library(proDA)
library(limma)
library(DESeq2)
library(cowplot)
#library(proDA)
library(pheatmap)
library(SummarizedExperiment)
library(tidyverse)
#load datasets
load("../data/patMeta_enc.RData")
load("../data/ddsrna_enc.RData")
load("../data/proteomic_explore_enc.RData")
source("../code/utils.R")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, dev = c("png","pdf"))
View(patMeta)
View(sampleTab)
pathInfo <- sampleTab %>% filter(!lowQuality, !duplicatedPat)
View(pathInfo)
View(sampleTab)
labelBatch <- c(batch1 = "batch1", batch2 = "batch3", batch3 = "batch2")
patInfo <- sampleTab %>% filter(!lowQuality, !duplicatedPat)
patInfo <- patInfo %>% select(encID, leukCount, cohort,batch)
patInfo <- patInfo %>% select(encID, leukCount, cohort,batch) %>%
mutate(batch = labelBatch[batch])
View(patInfo)
patInfo <- patInfo %>% select(encID, leukCount, cohort,batch) %>%
mutate(batch = labelBatch[batch]) %>%
arrange(batch, encID)
View(patInfo)
View(sampleTab)
View(sampleTab)
View(patMeta)
View(patInfo)
View(sampleTab)
View(patMeta)
patInfo <- patInfo %>% select(encID, leukCount, cohort,batch) %>%
mutate(batch = labelBatch[batch]) %>%
arrange(batch, encID) %>%
left_join(select(patMeta, Patient.ID, IGHV.status, trisomy12), by = c(encID = "Patient.ID"))
View(patInfo)
patInfo <- patInfo %>% select(encID, leukCount, cohort,batch) %>%
mutate(batch = labelBatch[batch]) %>%
arrange(batch, encID) %>%
left_join(select(patMeta, Patient.ID, IGHV.status, trisomy12), by = c(encID = "Patient.ID")) %>%
left_join(select(survT, patID, OS, died, TTT, treatedAfter, TTT, age, sex, pretreat), by = c(encID = "patID"))
View(patInfo)
patInfo <- patInfo %>% select(encID, leukCount, cohort,batch) %>%
mutate(batch = labelBatch[batch]) %>%
arrange(batch, encID) %>%
left_join(select(patMeta, Patient.ID, IGHV.status, trisomy12), by = c(encID = "Patient.ID")) %>%
left_join(select(survT, patID, OS, died, TTT, treatedAfter, TTT, age, sex, pretreat), by = c(encID = "patID")) %>%
mutate(`No.` = seq(nrow(.)))
View(patInfo)
View(patInfo)
geneMat <- patMeta[match(patInfo$encID, patMeta$Patient.ID)]
geneMat <- patMeta[match(patInfo$encID, patMeta$Patient.ID),]
View(geneMat)
geneMat <- patMeta[match(patInfo$encID, patMeta$Patient.ID),] %>%
select(-Methylation_Cluster)
View(geneMat)
mutate(IGHV.status = ifelse(!is.na(IGHV.status), ifelse(IGHV.status == "M",1,0),NA)
View(geneMat)
View(geneMat)
View(sampleTab)
mutate(cohort = sampleTab[match(Patient.ID, sampleTab$encID),]$cohort)
geneMat <-  patMeta[match(patInfo$encID, patMeta$Patient.ID),] %>%
select(-Methylation_Cluster) %>%
mutate(IGHV.status = ifelse(!is.na(IGHV.status), ifelse(IGHV.status == "M",1,0),NA)) %>%
mutate(cohort = sampleTab[match(Patient.ID, sampleTab$encID),]$cohort) %>%
mutate(cohort = ifelse(cohort == "exploration",1,0)) %>%
mutate_if(is.factor, as.character) %>%
mutate_at(vars(-Patient.ID), as.numeric) %>% #assign a few unknown mutated cases to wildtype
data.frame() %>% column_to_rownames("Patient.ID")
View(geneMat)
View(geneMat)
geneMat <- geneMat[,apply(geneMat,2, function(x) sum(x %in% 1, na.rm = TRUE))>=5]
geneMat <-  patMeta[match(patInfo$encID, patMeta$Patient.ID),] %>%
select(-Methylation_Cluster) %>%
mutate(IGHV.status = ifelse(!is.na(IGHV.status), ifelse(IGHV.status == "M",1,0),NA)) %>%
mutate(cohort = sampleTab[match(Patient.ID, sampleTab$encID),]$cohort) %>%
mutate(cohort = ifelse(cohort == "exploration",1,0)) %>%
mutate_if(is.factor, as.character) %>%
mutate_at(vars(-Patient.ID), as.numeric) %>% #assign a few unknown mutated cases to wildtype
data.frame() %>% column_to_rownames("Patient.ID")
View(geneMat)
geneMat <- geneMat[,apply(geneMat,2, function(x) sum(x %in% 1, na.rm = TRUE))>=5]
View(geneMat)
#protCLL <- protCLL[,colnames(protCLL) %in% patMeta$Patient.ID]
library(limma)
library(DESeq2)
library(qvalue)
library(proDA)
library(limma)
library(DESeq2)
library(qvalue)
#library(proDA)
library(IHW)
library(limma)
library(DESeq2)
library(qvalue)
#library(proDA)
#library(IHW)
library(SummarizedExperiment)
library(tidyverse)
#load datasets
load("../data/patMeta_enc.RData")
load("../data/ddsrna_enc.RData")
load("../data/proteomic_explore_enc.RData")
source("../code/utils.R")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE,dev = c("png","pdf"))
#protCLL <- protCLL[,colnames(protCLL) %in% patMeta$Patient.ID]
View(dds)
#protCLL <- protCLL[rowData(protCLL)$uniqueMap,]
protMat <- assays(protCLL)[["count"]] #without imputation
protMatLog <- assays(protCLL)[["log2Norm"]]
View(protMat)
load("~/Documents/PhD_AI/TCGA/lung_cancer/LUAD/rna_test.Rdata")
View(luad_rna)
setwd("/Users/katsiarynadavydzenka/Documents/PhD_AI/TCGA/")
pkgs <- c("dplyr", "ggplot2", "cluster", "factoextra", "heatmaply", "DESeq2", "tidyverse", "DESeq2")
sapply(pkgs, require, character.only = TRUE)
load("~/Documents/PhD_AI/TCGA/lung_cancer/LUAD/cnv_tumor.Rdata")
cnv_tumor <- as.matrix(t(luad_cnv_tumor))
# Normalization
cnv_data_normalized <- scale(cnv_tumor)
pca_result <- prcomp(cnv_data_normalized, scale. = TRUE)
pca_data <- as.data.frame(pca_result$x[, 1:10])
set.seed(123)
kmeans_result <- kmeans(pca_data, centers = 3)
# Add cluster assignments to the original data
cnv_tumor <- as.data.frame(cnv_tumor)
cnv_tumor$Cluster <- kmeans_result$cluster
# Visualization
fviz_cluster(kmeans_result, data = pca_data, geom = "point", stand = FALSE) +
ggtitle("PCA of CNV Profiles")+
theme_classic()
cnv_filt <- cnv_tumor[cnv_tumor$Cluster %in% c(2),]
cnv_filt <- as.matrix(t(cnv_filt))
cnv_filt <- apply(cnv_filt, 2, function(x) ifelse(x > 10, 10, x))
hist(rowMeans(cnv_filt),
main = "LUAD - cluster 3",
xlab = "CN state",
ylab = "Proportion",
col = "#E1DEFC",
prob = TRUE,
breaks = 8)
cnv_mean <- cnv_filt %>%
as.data.frame() %>%
mutate(cnv_mean = rowMeans(cnv_filt)) %>%
select(cnv_mean)
# RNA data processing #
load("~/Documents/PhD_AI/TCGA/lung_cancer/LUAD/rna_counts.Rdata")
colnames(luad_rna_sd) <- gsub(pattern = "\\.", replacement = "-", colnames(luad_rna_sd))
luad_tum <- luad_rna_sd %>% select(46:90)
luad_norm <- luad_rna_sd %>% select(1:45)
colnames(luad_norm) <- stringr::str_sub(colnames(luad_norm),1,12)
colnames(luad_tum) <- stringr::str_sub(colnames(luad_tum),1,12)
cnv_filt <- as.data.frame(cnv_filt)
luad_tum <- luad_tum[,colnames(luad_tum) %in% colnames(cnv_filt)]
luad_norm <- luad_norm[,colnames(luad_norm) %in% colnames(cnv_filt)]
x <- colnames(luad_norm)
names(luad_norm) <- paste(x,"-11A")
x <- colnames(luad_tum)
names(luad_tum) <- paste(x,"-01A")
# Exclude genes with low expression in normal tissue #
low_expression_threshold <- 15
expression_summary <- data.frame(
Gene = rownames(luad_norm),
MeanExpression = rowMeans(luad_norm)
)
summary(expression_summary$MeanExpression)
filtered_genes <- expression_summary %>%
filter(MeanExpression > low_expression_threshold)
luad_norm <- luad_norm[filtered_genes$Gene, ]
luad_tum <- luad_tum[filtered_genes$Gene, ]
luad_rna <- cbind(luad_norm, luad_tum)
View(luad_rna)
luad_rna <- luad_rna %>%  as.matrix()
rna_log_normalized <- DESeq2::vst(luad_rna)
rna_tumor <- rna_log_normalized[,21:40]
common_genes <- intersect(rownames(cnv_filt), rownames(rna_tumor))
cnv_filt <- cnv_filt[common_genes, ]
rna_tumor <- rna_tumor[common_genes, ]
# Apply the function across all common genes
model_results <- t(sapply(rownames(cnv_filt), function(gene) {
fit_linear_model(cnv_filt[gene, ], rna_tumor[gene, ])
}))
# Function to fit linear model and extract the slope and p-value
fit_linear_model <- function(cnv_values, expression_values) {
cnv_values <- as.numeric(cnv_values)
expression_values <- as.numeric(expression_values)
valid_indices <- !is.na(cnv_values) & !is.na(expression_values)
if (sum(valid_indices) > 1) {
model <- lm(expression_values[valid_indices] ~ cnv_values[valid_indices])
return(c(slope = coef(model)[2], p.value = summary(model)$coefficients[2, 4]))
} else {
return(c(slope = NA, p.value = NA))
}
}
# Apply the function across all common genes
model_results <- t(sapply(rownames(cnv_filt), function(gene) {
fit_linear_model(cnv_filt[gene, ], rna_tumor[gene, ])
}))
View(model_results)
View(rna_tumor)
View(model_results)
results_df <- data.frame(Gene = rownames(model_results), Slope = model_results[, 1], p.value = model_results[, 2])
View(results_df)
1.967419e-01
2
results_df$adj.p.value <- p.adjust(results_df$p.value, method = "BH")
View(results_df)
pvalue_threshold <- 0.05
slope_threshold <- 0.3
dosage_dependent_genes <- results_df %>%
filter(adj.p.value < pvalue_threshold & abs(Slope) > slope_threshold)
View(dosage_dependent_genes)
pvalue_threshold <- 0.05
slope_threshold <- 0.2
dosage_dependent_genes <- results_df %>%
filter(adj.p.value < pvalue_threshold & abs(Slope) > slope_threshold)
View(dosage_dependent_genes)
dosage_independent_genes <- results_df %>%
filter(adj.p.value >= pvalue_threshold | abs(Slope) <= slope_threshold)
# Subset both datasets to common genes #
common_genes <- intersect(rownames(cnv_filt), rownames(dosage_dependent_genes))
cnv_filt <- cnv_filt[common_genes, ]
luad_rna <- luad_rna[common_genes, ]
View(luad_rna)
cnv_normal <- matrix(2, nrow(luad_rna), 20)
rownames(cnv_normal) <- rownames(cnv_filt)
cnv <- cbind(cnv_normal, cnv_filt)
colnames(cnv) <- colnames(luad_rna)
cnv <- cnv/2
colnames(luad_rna) <- paste0("sample", 1:(ncol(luad_rna)))
colnames(cnv) <- colnames(luad_rna)
metadata <- data.frame(patID = colnames(luad_rna),
condition = rep(c("A", "B"), each = 20))
metadata <- metadata %>% remove_rownames %>% column_to_rownames(var = "patID")
metadata$condition <- as.factor(metadata$condition)
write.csv(cnv, file = "lung_cancer/LUAD/cnv_test_4.csv", row.names = T)
write.csv(luad_rna, file = "lung_cancer/LUAD/rna_test_4.csv", row.names = T)
write.csv(metadata, file = "lung_cancer/LUAD/metadata_4.csv", row.names = T)
# Scatter plot #
setwd("/Users/katsiarynadavydzenka/Documents/PhD_AI/CN-aware-DGE/Python/")
res <- read.csv("results/res_CNnaive_test4.csv")
res_adj <- read.csv("results/res_CNaware_test4.csv")
res <- read.csv("results/res_CNnaive_test4.csv")
res_adj <- read.csv("results/res_CNaware_test4.csv")
res <- res %>% select(X,log2FoldChange)
res <- res %>% remove_rownames %>% column_to_rownames(var="X")
res_adj <- res_adj %>% select(X,log2FoldChange)
res_adj <- res_adj %>% remove_rownames %>% column_to_rownames(var="X")
common_genes <- intersect(rownames(cnv_mean), rownames(res))
cnv_mean <- cnv_mean[common_genes, ]
cnv_mean <- data.frame(cnv_mean)
plot_data <- merge(cnv_mean, res, by = "row.names")
plot_data_adj <- merge(cnv_mean, res_adj, by = "row.names")
colnames(plot_data) <- c("geneID", "cnv_mean", "logFC")
colnames(plot_data_adj) <- c("geneID", "cnv_mean", "logFC")
View(plot_data)
scatter1 = ggplot(plot_data, aes(x = log2(cnv_mean), y = logFC)) +
geom_point(size=0.8) +
#geom_smooth(method = "lm", color = "blue", se = T)+
geom_smooth()+
theme(legend.position = 'bottom') +
labs(title = "Cluster 2 - no CN normalization", x ="log2(CN ratio)", y="log2FC") +
theme_classic()
scatter1
plot_data <- plot_data %>% dplyr::filter(logFC > -2.5,)
scatter1 = ggplot(plot_data, aes(x = log2(cnv_mean), y = logFC)) +
geom_point(size=0.8) +
#geom_smooth(method = "lm", color = "blue", se = T)+
geom_smooth()+
theme(legend.position = 'bottom') +
labs(title = "Cluster 2 - no CN normalization", x ="log2(CN ratio)", y="log2FC") +
theme_classic()
scatter1
scatter2 = ggplot(plot_data_adj, aes(x = log2(cnv_mean), y = logFC)) +
geom_point(size=0.8) +
#geom_smooth(method = "lm", color = "blue", se = T)+
geom_smooth()+
theme(legend.position = 'bottom') +
labs(title = "Cluster 2 - with CN normalization", x ="log2(CN ratio)", y="log2FC") +
theme_classic()
scatter2
gridExtra::grid.arrange(scatter1, scatter2, nrow = 1)
setwd("/Users/katsiarynadavydzenka/Documents/PhD_AI/CN-aware-DGE/Python/")
res <- read.csv("results/res_CNnaive_test4.csv")
res_adj <- read.csv("results/res_CNaware_test4.csv")
res$diffexpressed <- "NO"
res$diffexpressed[res$log2FoldChange >= 1.0 & res$padj < 0.05] <- "UP"
res$diffexpressed[res$log2FoldChange <= -1.0 & res$padj < 0.05] <- "DOWN"
res_adj$diffexpressed <- "NO"
res_adj$diffexpressed[res_adj$log2FoldChange >= 1.0 & res_adj$padj < 0.05] <- "UP"
res_adj$diffexpressed[res_adj$log2FoldChange <= -1.0 & res_adj$padj < 0.05] <- "DOWN"
#Make simple graphics
p1 <- ggplot(data = res, aes(x = log2FoldChange, y = -log10(padj), col = diffexpressed)) +
geom_vline(xintercept = c(-1.0, 1.0), col = "darkgreen", linetype = 'dashed') +
geom_hline(yintercept = -log10(0.05), col = "darkgreen", linetype = 'dashed') +
geom_point(size = 1) +
scale_color_manual(values = c("darkblue", "gray", "darkred"))+
scale_x_continuous(breaks = seq(-8, 8, 1))+
labs(title="pydeseq2_CNnaive - sim",x="effect size (log2)")+
theme_bw()+
theme(legend.position="none")+
font("xy.text", size = 10, color = "black")+
font("xlab", size = 10)+
font("ylab", size = 10)+
theme(plot.title=element_text(hjust=0.5, vjust=0.5))
pkgs <- c("tidyverse", "ggplot2", "colorspace", "ggpubr", "gridExtra")
sapply(pkgs, require, character.only = TRUE)
#Make simple graphics
p1 <- ggplot(data = res, aes(x = log2FoldChange, y = -log10(padj), col = diffexpressed)) +
geom_vline(xintercept = c(-1.0, 1.0), col = "darkgreen", linetype = 'dashed') +
geom_hline(yintercept = -log10(0.05), col = "darkgreen", linetype = 'dashed') +
geom_point(size = 1) +
scale_color_manual(values = c("darkblue", "gray", "darkred"))+
scale_x_continuous(breaks = seq(-8, 8, 1))+
labs(title="pydeseq2_CNnaive - sim",x="effect size (log2)")+
theme_bw()+
theme(legend.position="none")+
font("xy.text", size = 10, color = "black")+
font("xlab", size = 10)+
font("ylab", size = 10)+
theme(plot.title=element_text(hjust=0.5, vjust=0.5))
p1
#Make simple graphics
p1 <- ggplot(data = res, aes(x = log2FoldChange, y = -log10(padj), col = diffexpressed)) +
geom_vline(xintercept = c(-1.0, 1.0), col = "darkgreen", linetype = 'dashed') +
geom_hline(yintercept = -log10(0.05), col = "darkgreen", linetype = 'dashed') +
geom_point(size = 1) +
scale_color_manual(values = c("darkblue", "gray", "darkred"))+
scale_x_continuous(breaks = seq(-8, 8, 1))+
labs(title="pydeseq2_CNnaive",x="effect size (log2)")+
theme_bw()+
theme(legend.position="none")+
font("xy.text", size = 10, color = "black")+
font("xlab", size = 10)+
font("ylab", size = 10)+
theme(plot.title=element_text(hjust=0.5, vjust=0.5))
p1
p2 <- ggplot(data = res_adj, aes(x = log2FoldChange, y = -log10(padj), col = diffexpressed)) +
geom_vline(xintercept = c(-1.0, 1.0), col = "darkgreen", linetype = 'dashed') +
geom_hline(yintercept = -log10(0.05), col = "darkgreen", linetype = 'dashed') +
geom_point(size = 1) +
scale_color_manual(values = c("gray", "darkblue", "darkred"))+
scale_x_continuous(breaks = seq(-8, 8, 1))+
labs(title="pydeseq2_CNaware",x="effect size (log2)")+
theme_bw()+
theme(legend.position="none")+
font("xy.text", size = 10, color = "black")+
font("xlab", size = 10)+
font("ylab", size = 10)+
theme(plot.title=element_text(hjust=0.5, vjust=0.5))
p2
setwd("/Users/katsiarynadavydzenka/Documents/PhD_AI/CN-aware-DGE/Python/")
res <- read.csv("results/res_CNnaive_test4.csv")
res_adj <- read.csv("results/res_CNaware_test4.csv")
View(res)
View(res_adj)
res$diffexpressed <- "NO"
res$diffexpressed[res$log2FoldChange >= 1.0 & res$padj < 0.05] <- "UP"
res$diffexpressed[res$log2FoldChange <= -1.0 & res$padj < 0.05] <- "DOWN"
View(res)
#res <- res[-c(11602), ]
res
res_adj$diffexpressed <- "NO"
res_adj$diffexpressed[res_adj$log2FoldChange >= 1.0 & res_adj$padj < 0.05] <- "UP"
res_adj$diffexpressed[res_adj$log2FoldChange <= -1.0 & res_adj$padj < 0.05] <- "DOWN"
setwd("/Users/katsiarynadavydzenka/Documents/PhD_AI/CN-aware-DGE/Python/")
res <- read.csv("results/res_CNnaive_test4.csv")
res_adj <- read.csv("results/res_CNaware_test4.csv")
res$diffexpressed <- "NO"
res$diffexpressed[res$log2FoldChange >= 1.0 & res$padj < 0.05] <- "UP"
res$diffexpressed[res$log2FoldChange <= -1.0 & res$padj < 0.05] <- "DOWN"
res_adj$diffexpressed <- "NO"
res_adj$diffexpressed[res_adj$log2FoldChange >= 1.0 & res_adj$padj < 0.05] <- "UP"
res_adj$diffexpressed[res_adj$log2FoldChange <= -1.0 & res_adj$padj < 0.05] <- "DOWN"
p1 <- ggplot(data = res, aes(x = log2FoldChange, y = -log10(padj), col = diffexpressed)) +
geom_vline(xintercept = c(-1.0, 1.0), col = "darkgreen", linetype = 'dashed') +
geom_hline(yintercept = -log10(0.05), col = "darkgreen", linetype = 'dashed') +
geom_point(size = 1) +
scale_color_manual(values = c("darkblue", "gray", "darkred"))+
scale_x_continuous(breaks = seq(-8, 8, 1))+
labs(title="pydeseq2_CNnaive",x="effect size (log2)")+
theme_bw()+
theme(legend.position="none")+
font("xy.text", size = 10, color = "black")+
font("xlab", size = 10)+
font("ylab", size = 10)+
theme(plot.title=element_text(hjust=0.5, vjust=0.5))
p1
p2 <- ggplot(data = res_adj, aes(x = log2FoldChange, y = -log10(padj), col = diffexpressed)) +
geom_vline(xintercept = c(-1.0, 1.0), col = "darkgreen", linetype = 'dashed') +
geom_hline(yintercept = -log10(0.05), col = "darkgreen", linetype = 'dashed') +
geom_point(size = 1) +
scale_color_manual(values = c("gray", "darkblue", "darkred"))+
scale_x_continuous(breaks = seq(-8, 8, 1))+
labs(title="pydeseq2_CNaware",x="effect size (log2)")+
theme_bw()+
theme(legend.position="none")+
font("xy.text", size = 10, color = "black")+
font("xlab", size = 10)+
font("ylab", size = 10)+
theme(plot.title=element_text(hjust=0.5, vjust=0.5))
p2
p2 <- ggplot(data = res_adj, aes(x = log2FoldChange, y = -log10(padj), col = diffexpressed)) +
geom_vline(xintercept = c(-1.0, 1.0), col = "darkgreen", linetype = 'dashed') +
geom_hline(yintercept = -log10(0.05), col = "darkgreen", linetype = 'dashed') +
geom_point(size = 1) +
scale_color_manual(values = c("darkblue", "gray", "darkred"))+
scale_x_continuous(breaks = seq(-8, 8, 1))+
labs(title="pydeseq2_CNaware",x="effect size (log2)")+
theme_bw()+
theme(legend.position="none")+
font("xy.text", size = 10, color = "black")+
font("xlab", size = 10)+
font("ylab", size = 10)+
theme(plot.title=element_text(hjust=0.5, vjust=0.5))
p2
res_adj <- read.csv("results/res_CNaware_test4.csv")
res_adj$diffexpressed <- "NO"
res_adj$diffexpressed[res_adj$log2FoldChange >= 1.0 & res_adj$padj < 0.05] <- "UP"
res_adj$diffexpressed[res_adj$log2FoldChange <= -1.0 & res_adj$padj < 0.05] <- "DOWN"
p2 <- ggplot(data = res_adj, aes(x = log2FoldChange, y = -log10(padj), col = diffexpressed)) +
geom_vline(xintercept = c(-1.0, 1.0), col = "darkgreen", linetype = 'dashed') +
geom_hline(yintercept = -log10(0.05), col = "darkgreen", linetype = 'dashed') +
geom_point(size = 1) +
scale_color_manual(values = c("darkblue", "gray", "darkred"))+
scale_x_continuous(breaks = seq(-8, 8, 1))+
labs(title="pydeseq2_CNaware",x="effect size (log2)")+
theme_bw()+
theme(legend.position="none")+
font("xy.text", size = 10, color = "black")+
font("xlab", size = 10)+
font("ylab", size = 10)+
theme(plot.title=element_text(hjust=0.5, vjust=0.5))
p2
p1
p2
p1
p2 <- ggplot(data = res_adj, aes(x = log2FoldChange, y = -log10(padj), col = diffexpressed)) +
geom_vline(xintercept = c(-1.0, 1.0), col = "darkgreen", linetype = 'dashed') +
geom_hline(yintercept = -log10(0.05), col = "darkgreen", linetype = 'dashed') +
geom_point(size = 1) +
scale_color_manual(values = c("darkblue", "gray", "darkred"))+
scale_x_continuous(breaks = seq(-8, 8, 1))+
labs(title="pydeseq2_CNaware",x="effect size (log2)")+
theme_bw()+
theme(legend.position="none")+
font("xy.text", size = 10, color = "black")+
font("xlab", size = 10)+
font("ylab", size = 10)+
theme(plot.title=element_text(hjust=0.5, vjust=0.5))
p2
View(res_adj)
res_adj <- res_adj %>% dplyr::filter(padj > 0.000000e+00, log2FoldChange > -4.0,)
p2 <- ggplot(data = res_adj, aes(x = log2FoldChange, y = -log10(padj), col = diffexpressed)) +
geom_vline(xintercept = c(-1.0, 1.0), col = "darkgreen", linetype = 'dashed') +
geom_hline(yintercept = -log10(0.05), col = "darkgreen", linetype = 'dashed') +
geom_point(size = 1) +
scale_color_manual(values = c("darkblue", "gray", "darkred"))+
scale_x_continuous(breaks = seq(-8, 8, 1))+
labs(title="pydeseq2_CNaware",x="effect size (log2)")+
theme_bw()+
theme(legend.position="none")+
font("xy.text", size = 10, color = "black")+
font("xlab", size = 10)+
font("ylab", size = 10)+
theme(plot.title=element_text(hjust=0.5, vjust=0.5))
p2
res_adj <- res_adj %>% dplyr::filter(padj > 2.634783e-75, log2FoldChange > -4.0,)
p2 <- ggplot(data = res_adj, aes(x = log2FoldChange, y = -log10(padj), col = diffexpressed)) +
geom_vline(xintercept = c(-1.0, 1.0), col = "darkgreen", linetype = 'dashed') +
geom_hline(yintercept = -log10(0.05), col = "darkgreen", linetype = 'dashed') +
geom_point(size = 1) +
scale_color_manual(values = c("darkblue", "gray", "darkred"))+
scale_x_continuous(breaks = seq(-8, 8, 1))+
labs(title="pydeseq2_CNaware",x="effect size (log2)")+
theme_bw()+
theme(legend.position="none")+
font("xy.text", size = 10, color = "black")+
font("xlab", size = 10)+
font("ylab", size = 10)+
theme(plot.title=element_text(hjust=0.5, vjust=0.5))
p2
gridExtra::grid.arrange(p1, p2, nrow = 1)
